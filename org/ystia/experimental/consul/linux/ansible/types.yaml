tosca_definitions_version: alien_dsl_2_0_0
#
# Copyright 2018 Bull S.A.S. Atos Technologies - Bull, Rue Jean Jaures, B.P.68, 78340, Les Clayes-sous-Bois, France.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


metadata:
  template_name: org.ystia.yorc.experimental.consul.linux.ansible
  template_version: 2.3.0-SNAPSHOT
  template_author: yorc

imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - yorc-types:1.1.0
  - org.ystia.yorc.experimental.consul.pub:2.3.0-SNAPSHOT

description: >
  This component allows to deploy Consul with Ansible


node_types:
  org.ystia.yorc.experimental.consul.linux.ansible.nodes.ConsulServer:
    derived_from: org.ystia.yorc.experimental.consul.pub.nodes.ConsulServer
    description: Installation of a Consul Server on Linux using Ansible
    tags:
      icon: /images/consul-icon.png
    properties:
      install_dnsmasq:
        type: boolean
        description: >
          By default, a dnsmask is installed as a DNS proxy.
          It is sometimes needed to remove it if another DNS is already installed (bind for example)
        default: true
    attributes:
      web_ui_url: { concat: [ "http://", get_attribute: [ HOST, public_address ], ":", get_property: [ SELF, consul_agent, port ] ] }
    requirements:
      - wan_server:
          # Optionally a server may join another server in another data center using the WAN interface
          capability: org.ystia.yorc.experimental.consul.pub.capabilities.ConsulServerWAN
          relationship: org.ystia.yorc.experimental.consul.linux.ansible.relationships.JoinServerWAN
          occurrences: [0, 1]
    interfaces:
      Standard:
        inputs:
          INSTALL_DIR: { get_property: [SELF, install_dir] }
          CONFIG_DIR: { get_property: [SELF, config_dir] }
          MODE: { get_property: [SELF, mode] }
          DATA_DIR: { get_property: [SELF, data_dir] }
          WEB_UI: { get_property: [SELF, web_ui] }
        create:
          description: Consul installation step
          inputs:
            INSTALL_DNSMASQ: { get_property: [SELF, install_dnsmasq] }
            DOMAIN: { get_property: [SELF, domain] }
            DOWNLOAD_URL: { get_property: [SELF, download_url] }
          implementation: playbooks/consul_install.yaml
        configure:
          inputs:
            DATACENTER: { get_property: [SELF, datacenter] }
            DOMAIN: { get_property: [SELF, domain] }
            WEB_UI: { get_property: [SELF, web_ui] }
            TLS_ENABLED: { get_property: [SELF, tls_enabled] }
            TLS_FOR_CHECKS_ENABLED: { get_property: [SELF, tls_for_checks_enabled] }
            CA_KEY: { get_property: [SELF, ca_key] }
            CA_PEM: { get_property: [SELF, ca_pem] }
            CA_PASSPHRASE: { get_property: [SELF, ca_passphrase] }
            ENCRYPT_KEY: { get_property: [SELF, encrypt_key] }
            PORT: { get_property: [SELF, consul_server, port]}
            IP_ADDRESS: { get_attribute: [HOST, private_address] }
            WAN_ADDRESS: { get_attribute: [HOST, public_address] }
          implementation: playbooks/consul_configure.yaml
        start:
          implementation: playbooks/consul_start.yml
        stop:
          implementation: playbooks/consul_stop.yaml
        delete:
          description: Consul data directory cleanup step
          inputs:
            DATA_DIR: { get_property: [SELF, data_dir] }
            CONFIG_DIR: { get_property: [SELF, config_dir] }
          implementation: playbooks/consul_cleanup.yaml
      custom:
        inputs:
          INSTALL_DIR: { get_property: [SELF, install_dir] }
        maintenance_on:
          inputs:
            MAINT_MODE: "on"
          implementation: playbooks/consul_maint.yml
        maintenance_off:
          inputs:
            MAINT_MODE: "off"
          implementation: playbooks/consul_maint.yml

  org.ystia.yorc.experimental.consul.linux.ansible.nodes.ConsulAgent:
    derived_from: org.ystia.yorc.experimental.consul.pub.nodes.ConsulAgent
    description: Installation of a Consul Agent on Linux using Ansible
    tags:
      icon: /images/consul-icon.png
    properties:
      install_dnsmasq:
        type: boolean
        description: >
          By default, a dnsmask is installed as a DNS proxy.
          It is sometimes needed to remove it if another DNS is already installed (bind for example)
        default: true
      web_ui_url:
        description: >
          Consul Web UI URL
        type: string
        required: false
    requirements:
      - consul_server:
          # An agent requires a server to operate
          capability: org.ystia.yorc.experimental.consul.pub.capabilities.ConsulServer
          relationship: org.ystia.yorc.experimental.consul.linux.ansible.relationships.JoinServer
          occurrences: [1, 1]
    interfaces:
      Standard:
        inputs:
          INSTALL_DIR: { get_property: [SELF, install_dir] }
          CONFIG_DIR: { get_property: [SELF, config_dir] }
          MODE: { get_property: [SELF, mode] }
          DATA_DIR: { get_property: [SELF, data_dir] }
          WEB_UI: { get_property: [SELF, web_ui] }
        create:
          description: Consul installation step
          inputs:
            INSTALL_DNSMASQ: { get_property: [SELF, install_dnsmasq] }
            DOMAIN: { get_property: [SELF, domain] }
            DOWNLOAD_URL: { get_property: [SELF, download_url] }
          implementation: playbooks/consul_install.yaml
        configure:
          inputs:
            DATACENTER: { get_property: [SELF, datacenter] }
            DOMAIN: { get_property: [SELF, domain] }
            WEB_UI: { get_property: [SELF, web_ui] }
            TLS_ENABLED: { get_property: [SELF, tls_enabled] }
            TLS_FOR_CHECKS_ENABLED: { get_property: [SELF, tls_for_checks_enabled] }
            CA_KEY: { get_property: [SELF, ca_key] }
            CA_PEM: { get_property: [SELF, ca_pem] }
            CA_PASSPHRASE: { get_property: [SELF, ca_passphrase] }
            ENCRYPT_KEY: { get_property: [SELF, encrypt_key] }
            PORT: { get_property: [SELF, consul_agent, port]}
            IP_ADDRESS: { get_attribute: [HOST, private_address] }
            WAN_ADDRESS: { get_attribute: [HOST, public_address] }
          implementation: playbooks/consul_configure.yaml
        start:
          implementation: playbooks/consul_start.yml
        stop:
          implementation: playbooks/consul_stop.yaml
      custom:
        inputs:
          INSTALL_DIR: { get_property: [SELF, install_dir] }
        maintenance_on:
          inputs:
            MAINT_MODE: "on"
          implementation: playbooks/consul_maint.yml
        maintenance_off:
          inputs:
            MAINT_MODE: "off"
          implementation: playbooks/consul_maint.yml

relationship_types:
  org.ystia.yorc.experimental.consul.linux.ansible.relationships.JoinServer:
    derived_from: tosca.relationships.ConnectsTo
    description: >
      Connects a Consul agent to a Consul server
    valid_target_types: [ org.ystia.yorc.experimental.consul.pub.capabilities.ConsulServer ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            # Workaround for consul_server that is not a derived of tosca.capabilities.Endpoint
            # we get consul server @ip from the capability in order to be able to get it from an a4c service
            # not working in 2.0.0, but will work when consul_server will be fixed in tosca.capabilities.Endpoint
            # see https://github.com/alien4cloud/csar-public-library/pull/19
            SERVER_IP_CAP: { get_attribute: [TARGET, consul_server, ip_address] }
            # and we get the @ip from the target host. In order to work with services, we should add an ip_address
            # attribute to the output properties of the consul server service topology
            SERVER_IP: { get_attribute: [TARGET, ip_address] }
            CONFIG_DIR: { get_property: [SOURCE, config_dir] }
          implementation: playbooks/consul_connects_agent_to_server.yml

  org.ystia.yorc.experimental.consul.linux.ansible.relationships.JoinServerWAN:
    derived_from: tosca.relationships.ConnectsTo
    description: >
      Connects a Consul server to another Consul server using its WAN address
    valid_target_types: [ org.ystia.yorc.experimental.consul.pub.capabilities.ConsulServerWAN ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            SERVER_WAN_IP: { get_attribute: [TARGET, public_address] }
            CONFIG_DIR: { get_property: [SOURCE, config_dir] }
          implementation: playbooks/consul_connects_servers_wan.yaml

