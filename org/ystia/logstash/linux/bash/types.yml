tosca_definitions_version: alien_dsl_2_0_0

#
# Ystia Forge
# Copyright (C) 2018 Bull S. A. S. - Bull, Rue Jean Jaures, B.P.68, 78340, Les Clayes-sous-Bois, France.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.
#

metadata:
  template_name: org.ystia.logstash.linux.bash
  template_version: 2.3.0-SNAPSHOT
  template_author: Ystia

description:

imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - org.ystia.common:2.3.0-SNAPSHOT
  - org.ystia.consul.pub:2.3.0-SNAPSHOT
  - org.ystia.java.pub:2.3.0-SNAPSHOT
  - org.ystia.kafka.pub:2.3.0-SNAPSHOT
  - org.ystia.elasticsearch.pub:2.3.0-SNAPSHOT
  - org.ystia.logstash.pub:2.3.0-SNAPSHOT

node_types:
  org.ystia.logstash.linux.bash.nodes.Logstash:
    derived_from: org.ystia.consul.pub.nodes.ConsulUser
    description: Logstash component from Elastic Stack for linux
    tags:
      icon: /images/logstash-icon.png
    attributes:
      java_home: { get_operation_output: [ SELF, Configure, pre_configure_source, JAVA_HOME ] }
      ls_home: { get_operation_output: [ SELF, Standard, create, LOGSTASH_HOME ] }
    properties:
      component_version:
        type: version
        description: Version of the installed Logstash component
        default: 6.2.2
        constraints:
          - valid_values: [5.6.8,6.2.2]
      repository:
         type: string
         description: >
           This property give the opportunity to specify an alternative download repository for this component artifact.
           It is your responsibility to provide an accessible download url and to store required artifacts on it.
           You should specify only the base repository url. Artifacts names will be appended to it, so this property could be shared among
           several components using the inputs feature.
         required: true
         default: https://artifacts.elastic.co/downloads/logstash
         constraints:
           - pattern: ^(http|https|ftp)://.+/.*$
      auto_reload:
        type: boolean
        description: Monitor configuration changes and reload whenever it is changed
        default: false
      reload_interval:
        type: integer
        description: How frequently to poll the configuration location for changes, in seconds
        default: 60
      stdout:
        type: boolean
        description: Define the stdout logstash output, to allow to see the events pipeline.
        default: false
      heap_size:
        type: string
        default: "1G"
        description: >
          This property allows to set the heap memory size that is allocated to Logstash java process,
          It allocates the same value to both initial and maximum values (ie -Xms and -Xmx java options).
        constraints:
          - pattern: "[1-9][0-9]*[kKmMgG]"
      log_level:
        type: string
        description: >
          Define Logstash log level. By default very few logs are generated by Logstash.
          All logs are redirected to a file except if you set 'stdout' to 'true'.
        default: "warn"
        constraints:
          - valid_values: [ "fatal", "error", "warn", "info", "debug", "trace" ]
    capabilities:
      logstash_resource:
        type: org.ystia.logstash.pub.capabilities.LogstashEndpoint
      connector_host:
        type: org.ystia.logstash.pub.capabilities.LogstashConnectorHosting
        occurrences: [0,unbounded]
    requirements:
      - host:
          capability: org.ystia.java.pub.capabilities.JavaHosting
          relationship: org.ystia.java.pub.relationships.HostedOnJavaRuntime
          occurrences: [1, 1]
      - search_endpoint:
          capability: org.ystia.elasticsearch.pub.capabilities.SearchEndpoint
          relationship: org.ystia.logstash.linux.bash.relationships.LogstashToElasticsearch
          occurrences: [0,1]
      - kafka_output:
          capability: org.ystia.kafka.pub.capabilities.KafkaTopic
          relationship: org.ystia.logstash.linux.bash.relationships.LogstashToKafka
          occurrences: [0,1]
      - kafka_input:
          capability: org.ystia.kafka.pub.capabilities.KafkaTopic
          relationship: org.ystia.logstash.linux.bash.relationships.KafkaToLogstash
          occurrences: [0,1]
    interfaces:
      Standard:
          create:
            inputs:
              REPOSITORY: { get_property: [SELF, repository] }
              LS_VERSION: { get_property: [SELF, component_version] }
            implementation: scripts/logstash_install.sh
          configure:
            inputs:
              LS_VERSION: { get_property: [SELF, component_version] }
              STDOUT: { get_property: [SELF, stdout] }
              LOGSTASH_HEAP_SIZE: { get_property: [SELF, heap_size] }
              JAVA_HOME: { get_attribute: [SELF, java_home] }
              LOGSTASH_HOME: { get_attribute: [SELF, ls_home] }
              AUTO_RELOAD: { get_property: [SELF, auto_reload] }
              RELOAD_INTERVAL: { get_property: [SELF, reload_interval] }
              LOGSTASH_LOG_LEVEL: { get_property: [SELF, log_level] }
            implementation: scripts/logstash_configure.sh
          start:
            inputs:
              LOGSTASH_HOME: { get_attribute: [SELF, ls_home] }
            implementation: scripts/logstash_start.sh
          stop:
            inputs:
              LOGSTASH_HOME: { get_attribute: [SELF, ls_home] }
            implementation: scripts/logstash_stop.sh
          delete:
            inputs:
              LS_VERSION: { get_property: [SELF, component_version] }
            implementation: scripts/logstash_delete.sh
      custom:
          change_input:
            inputs:
              url:
                type: string
                description: Input param for change_input
                required: true
              AUTO_RELOAD: { get_property: [SELF, auto_reload] }
              LOGSTASH_HOME: { get_attribute: [SELF, ls_home] }
            implementation: scripts/logstash_changeInput.sh
          change_output:
            inputs:
              url:
                type: string
                description: Input param for change_output
                required: true
              AUTO_RELOAD: { get_property: [SELF, auto_reload] }
              LOGSTASH_HOME: { get_attribute: [SELF, ls_home] }
            implementation: scripts/logstash_changeOutput.sh
          change_filter:
            inputs:
              url:
                type: string
                description: Input param for change_filter
                required: true
              AUTO_RELOAD: { get_property: [SELF, auto_reload] }
              LOGSTASH_HOME: { get_attribute: [SELF, ls_home] }
            implementation: scripts/logstash_changeFilter.sh
    artifacts:
      - scripts:
          file: scripts
          type: tosca.artifacts.File
      - conf:
          file: conf
          type: tosca.artifacts.File
      - certificates:
          file: certificates
          type: tosca.artifacts.File
      - private_key:
          file: certificates/default-logstash-forwarder.key
          type: tosca.artifacts.File
      - certificate:
          file: certificates/default-logstash-forwarder.crt
          type: tosca.artifacts.File
      - inputs_conf:
          file: conf/1-1_logstash_inputs.conf
          type: tosca.artifacts.File
      - filters_conf:
          file: conf/2-1_logstash_filters.conf
          type: tosca.artifacts.File
      - outputs_conf:
          file: conf/3-1_logstash_outputs.conf
          type: tosca.artifacts.File
      - extra_host:
          file: artifactsFiles/hosts_to_add.txt
          type: tosca.artifacts.File

  org.ystia.logstash.linux.bash.nodes.GeoNames:
    derived_from: org.ystia.consul.pub.nodes.ConsulUser
    description: A GeoNames connector for Logstash on linux
    tags:
      icon: /images/geonames.gif
    properties:
      repository:
        type: string
        description: >
          The repository to download the geonames archives.
          You may want to specify a local directory where you have previously copied the archive files.
        required: false
        default: http://download.geonames.org/export/dump/
        constraints:
          - pattern: ^(http|https|ftp)://.+/.*$
      filename:
        type: string
        default: allCountries
        description: >
          Name of the file containing GeoNames data
          Choose allCountries to get a complete information (very heavy)
          You can choose a country code in capitals (US, FR, ...)
          Or another file like cities15000 or cities5000
          A .zip suffix will be added to this name.
        required: true
      indexname:
        type: string
        default: geonames
        description: >
          Name of index to store GeoNames data
        required: true
    capabilities:
      geonames_resource: org.ystia.logstash.pub.capabilities.GeonamesEndpoint
    requirements:
      - host:
          capability: org.ystia.logstash.pub.capabilities.LogstashConnectorHosting
          relationship: org.ystia.logstash.linux.bash.relationships.GeonamesHostedOnLogstash
          occurrences: [1,1]
    interfaces:
      Standard:
          create:
            inputs:
              REPOSITORY: { get_property: [SELF, repository] }
              FNAME: { get_property: [SELF, filename] }
            implementation: geonames/create.sh
          start:
            implementation: geonames/start.sh
          stop:
            implementation: geonames/stop.sh
      custom:
          update:
            inputs:
              REPOSITORY: { get_property: [SELF, repository] }
              FNAME:
                type: string
                description: File name used for update (without .zip suffix)
                required: true
            implementation: geonames/update.sh
    artifacts:
      - geoscripts:
          file: geonames
          type: tosca.artifacts.File
      - scripts:
          file: scripts
          type: tosca.artifacts.File

  org.ystia.logstash.linux.bash.nodes.TwitterConnector:
    derived_from: org.ystia.nodes.Root
    description: A twitter connector
    tags:
      icon: /images/twitter-icon.png
    requirements:
      - connector_host:
          capability: org.ystia.logstash.pub.capabilities.LogstashConnectorHosting
          relationship: org.ystia.logstash.linux.bash.relationships.TwitterConnectorHostedOnLogstash
          occurrences: [1,1]
    properties:
      consumer_key:
        type: string
        description: Your Twitter App's consumer key.
        required: true
      consumer_secret:
        type: string
        description: Your Twitter App's consumer secret.
        required: true
      oauth_token:
        type: string
        description: Your Twitter oauth token.
        required: true
      oauth_token_secret:
        type: string
        description: Your Twitter oauth token secret.
        required: true
      use_proxy:
        type: boolean
        default: false
        description: Use a proxy to handle the connections.
        required: false
      proxy_address:
        type: string
        description: >
          Address of the proxy to use.
          If use_proxy property is true, and no value is set for this property,
          then default environment proxy settings on the compute will be used.
        required: false
      proxy_port:
        type: integer
        description: >
          Port of the proxy to use.
          If use_proxy property is true, and no value is set for this property,
          then default environment proxy settings on the compute will be used.
        required: false
      keywords:
        type: list
        entry_schema:
          description: a keyword to track in the Twitter stream
          type: string
        description: >
          An list of keywords to track in the Twitter stream
          Ex: [foo, bar]
          At least one property "keywords" or "follows" must be specified if use_samples property is not set.
        required: false
      follows:
        type: list
        entry_schema:
          description: >
            a stringified user ID.
            ID can be obtained from Twitter username: http://gettwitterid.com
          type: string
          constraints:
            - pattern: (\d)+
        description: >
          A list of user IDs, indicating the users to return statuses for in the Twitter stream.
          Ex: [122345, 414512].
          At least one property "keywords" or "follows" must be specified if use_samples property is not set.
        required: false
      languages:
        type: list
        entry_schema:
          description: a BCP 47 language identifier
          type: string
        description: >
          A list of BCP 47 language identifiers corresponding to any of the languages listed on Twitter's advanced search
          page will only return tweets that have been detected as being written in the specified languages.
          Ex: [ en, fr ]
        required: false
      use_samples:
        type: boolean
        default: false
        description: >
          Returns a small random sample of all public statuses.
          If set to true, the keywords, follows and languages properties will be ignored.
        required: false
      full_tweet:
        type: boolean
        default: false
        description: >
          Record full tweet object as given to us by the Twitter Streaming API.
        required: false
      tags:
        type: list
        entry_schema:
          description: a tag to add to your event
          type: string
        description: >
          A list of tags to add to your event. This can help with processing later.
          Ex: [TagName]
        required: false
      ignore_retweets:
        type: boolean
        default: false
        description: >
          Lets you ignore the retweets coming out of the Twitter API.
        required: false
    interfaces:
      custom:
        change_authentication:
          inputs:
            consumer_key:
              type: string
              description: Your Twitter App's consumer key.
              required: true
            consumer_secret:
              type: string
              description: Your Twitter App's consumer secret.
              required: true
            oauth_token:
              type: string
              description: Your Twitter oauth token.
              required: true
            oauth_token_secret:
              type: string
              description: Your Twitter oauth token secret.
              required: true
          implementation: twitter/twitter_changeAuthentication.sh
        change_follows:
          inputs:
            follows:
              type: list
              entry_schema:
                constraints:
                  - pattern: (\d)+
              description: >
                An list of user IDs, indicating the users to return statuses for in the Twitter stream.
                ID can be obtained from Twitter username: http://gettwitterid.com
                Ex: [122345, 414512].
                At least one property "keywords" or "follows" must be specified if use_samples property is not set.
              required: false
          implementation: twitter/twitter_changeFollows.sh
        change_keywords:
          inputs:
            keywords:
              type: list
              entry_schema:
                type: string
              description: >
                An list of keywords to track in the Twitter stream
                Ex: [foo, bar]
                At least one property "keywords" or "follows" must be specified if use_samples property is not set.
              required: false
          implementation: twitter/twitter_changeKeywords.sh
        change_languages:
          inputs:
            languages:
              type: list
              entry_schema:
                type: string
              description: >
                An list of BCP 47 language identifiers corresponding to any of the languages listed on Twitter's advanced search
                page will only return tweets that have been detected as being written in the specified languages.
                Ex: [ en, fr ]
              required: false
          implementation: twitter/twitter_changeLanguages.sh
        change_tags:
          inputs:
            tags:
              type: list
              entry_schema:
                type: string
              description: >
                An list of tags to add to your event. This can help with processing later.
                Ex: [TagName]
              required: false
          implementation: twitter/twitter_changeTags.sh
        change_use_samples:
          inputs:
            use_samples:
              type: boolean
              default: false
              description: >
                Returns a small random sample of all public statuses.
                If set to true, the keywords, follows and languages properties will be ignored.
              required: true
          implementation: twitter/twitter_changeUseSamples.sh
        change_full_tweet:
          inputs:
            full_tweet:
              type: boolean
              default: false
              description: >
                Record full tweet object as given to us by the Twitter Streaming API.
              required: true
          implementation: twitter/twitter_changeFullTweet.sh
        change_ignore_retweets:
          inputs:
            ignore_retweets:
              type: boolean
              default: false
              description: >
                Lets you ignore the retweets coming out of the Twitter API.
              required: true
          implementation: twitter/twitter_changeIgnoreRetweets.sh
        add_tags:
          inputs:
            tags:
              type: list
              entry_schema:
                type: string
              description: >
                A list of tag(s) to add to existing tags list
                Ex: [tag1, tag2]
              required: true
          implementation: twitter/twitter_addTags.sh
        remove_tags:
          inputs:
            tags:
              type: list
              entry_schema:
                type: string
              description: >
                A list of tag(s) to remove to existing tags list
                Ex: [tag1, tag2]
              required: true
          implementation: twitter/twitter_removeTags.sh
        add_keywords:
          inputs:
            keywords:
              type: list
              entry_schema:
                type: string
              description: >
                A list of keyword(s) to add to existing keywords list
                Ex: [keyword1, keyword2]
              required: true
          implementation: twitter/twitter_addKeywords.sh
        remove_keywords:
          inputs:
            keywords:
              type: list
              entry_schema:
                type: string
              description: >
                A list of keyword(s) to remove to existing keywords list
                Ex: [keyword1, keyword2]
              required: true
          implementation: twitter/twitter_removeKeywords.sh
        add_languages:
          inputs:
            languages:
              type: list
              entry_schema:
                type: string
              description: >
                A list of language(s) to add to existing languages list
                Ex: [cz, de]
              required: true
          implementation: twitter/twitter_addLanguages.sh
        remove_languages:
          inputs:
            languages:
              type: string
              entry_schema:
                type: string
              description: >
                A list of language(s) to remove to existing languages list
                Ex: [cz, de]
              required: true
          implementation: twitter/twitter_removeLanguages.sh
        add_follows:
          inputs:
            follows:
              type: list
              entry_schema:
                type: string
              description: >
                A list of follow(s) to add to existing follows list
                Ex: [@ID1, @ID2]
              required: true
          implementation: twitter/twitter_addFollows.sh
        remove_follows:
          inputs:
            follows:
              type: list
              entry_schema:
                type: string
              description: >
                A list of follow(s) to remove to existing Follows list
                Ex: [@ID1, @ID2]
              required: true
          implementation: twitter/twitter_removeFollows.sh
    artifacts:
      - twitterscripts:
          file: twitter
          type: tosca.artifacts.File
      - lsscripts:
          file: scripts
          type: tosca.artifacts.File


relationship_types:
  org.ystia.logstash.linux.bash.relationships.LogstashToKafka:
    derived_from: org.ystia.kafka.pub.relationships.PublishToKafkaTopic
    description: Connects Logstash to Kafka
    valid_target_types: [ org.ystia.kafka.pub.capabilities.KafkaTopic ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            TOPIC_NAME: { get_property: [TARGET, topic_name] }
            REQUIRED_ACKS: { get_property: [SELF, request_required_acks] }
            MESSAGE_MAX_RETRIES: { get_property: [SELF, message_send_max_retries] }
            RETRY_BACKOFF_MS: { get_property: [SELF, retry_backoff_ms] }
            REQUEST_TIMEOUT_MS: { get_property: [SELF, request_timeout_ms] }
          implementation: relationships/kafka/configure-kafka-output.sh
    artifacts:
      - scripts:
          file: scripts
          type: tosca.artifacts.File

  org.ystia.logstash.linux.bash.relationships.KafkaToLogstash:
    derived_from: org.ystia.kafka.pub.relationships.ConnectsToKafkaTopic
    description: Connects Kafka to Logstash
    valid_target_types: [ org.ystia.kafka.pub.capabilities.KafkaTopic ]
    interfaces:
      Configure:
          pre_configure_source:
            inputs:
              TOPIC_NAME: { get_property: [TARGET, topic_name] }
            implementation: relationships/kafka/configure-kafka-input.sh
    artifacts:
      - scripts:
          file: scripts
          type: tosca.artifacts.File

  org.ystia.logstash.linux.bash.relationships.LogstashToElasticsearch:
    derived_from: org.ystia.relationships.ConnectsTo
    description: Connects Logstash to ElasticSearch
    valid_target_types: [ org.ystia.elasticsearch.pub.capabilities.SearchEndpoint ]
    properties:
      proxy:
        description:
          Allows to specify a proxy to use to connect to ElasticSearch
        type: string
        required: false
        default: ""
        constraints:
          - pattern: "^(https?://.+)?"
    interfaces:
      Configure:
          pre_configure_source:
            inputs:
              LOGSTASH_HOME: { get_attribute: [SOURCE, ls_home] }
              cluster_name: { get_property: [ TARGET, search_resource, cluster_name ] }
              ES_CAP_IP: { get_attribute: [ TARGET, search_resource, ip_address ] }
              ES_IP: { get_attribute: [ TARGET, private_address ] }
              ES_PUBLIC_IP: { get_attribute: [ TARGET, public_address ] }
              PROXY: { get_property: [SELF, proxy] }
            implementation: relationships/elasticsearch/configure.sh
    artifacts:
      - scripts:
          file: scripts
          type: tosca.artifacts.File

  org.ystia.logstash.linux.bash.relationships.GeonamesHostedOnLogstash:
    derived_from: org.ystia.relationships.HostedOn
    description: Connects Geonames to Logstash
    valid_target_types: [ org.ystia.logstash.pub.capabilities.LogstashConnectorHosting ]
    interfaces:
      Configure:
          post_configure_source:
            implementation: relationships/geonames/geonames_to_logstash.sh
            inputs:
              LOGSTASH_HOME: { get_attribute: [TARGET, ls_home] }
              REPOSITORY: { get_property: [SOURCE, repository] }
              INDEX: { get_property: [SOURCE, indexname] }
              FNAME: { get_property: [SOURCE, filename] }
    artifacts:
      - conf:
          file: conf
          type: tosca.artifacts.File
      - geoscripts:
          file: geonames
          type: tosca.artifacts.File
      - lsscripts:
          file: scripts
          type: tosca.artifacts.File
      - rsgeoscripts:
          file: relationships/geonames
          type: tosca.artifacts.File

  org.ystia.logstash.linux.bash.relationships.TwitterConnectorHostedOnLogstash:
    derived_from: org.ystia.relationships.HostedOn
    description: >
      Configure the Logstash Twitter input
    valid_target_types: [ org.ystia.logstash.pub.capabilities.LogstashConnectorHosting ]
    interfaces:
      Configure:
        pre_configure_source:
          implementation: relationships/twitter/twitter_on_logstash.sh
          inputs:
            CONSUMER_KEY: { get_property: [SOURCE, consumer_key] }
            CONSUMER_SECRET: { get_property: [SOURCE, consumer_secret] }
            OAUTH_TOKEN: { get_property: [SOURCE, oauth_token] }
            OAUTH_TOKEN_SECRET: { get_property: [SOURCE, oauth_token_secret] }
            USE_PROXY: { get_property: [SOURCE, use_proxy] }
            PROXY_ADDRESS: { get_property: [SOURCE, proxy_address] }
            PROXY_PORT: { get_property: [SOURCE, proxy_port] }
            KEYWORDS: { get_property: [SOURCE, keywords] }
            FOLLOWS: { get_property: [SOURCE, follows] }
            LANGUAGES: { get_property: [SOURCE, languages] }
            USE_SAMPLES: { get_property: [SOURCE, use_samples] }
            FULL_TWEET: { get_property: [SOURCE, full_tweet] }
            TAGS: { get_property: [SOURCE, tags] }
            IGNORE_RETWEETS: { get_property: [SOURCE, ignore_retweets] }
    artifacts:
      - twitterscripts:
          file: relationships/twitter
          type: tosca.artifacts.File
      - lsscripts:
          file: scripts
          type: tosca.artifacts.File
