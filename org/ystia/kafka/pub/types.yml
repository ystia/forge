tosca_definitions_version: alien_dsl_2_0_0

#
# Ystia Forge
# Copyright (C) 2018 Bull S. A. S. - Bull, Rue Jean Jaures, B.P.68, 78340, Les Clayes-sous-Bois, France.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.
#

metadata:
  template_name: org.ystia.kafka.pub
  template_version: 2.3.0-SNAPSHOT
  template_author: Ystia

description: Public interface types for Kafka support.

imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - org.ystia.common:2.3.0-SNAPSHOT
  - org.ystia.consul.pub:2.3.0-SNAPSHOT
  - org.ystia.java.pub:2.3.0-SNAPSHOT

capability_types:
  org.ystia.kafka.pub.capabilities.KafkaHosting:
    derived_from: tosca.capabilities.Container

  org.ystia.kafka.pub.capabilities.KafkaEndpoint:
    derived_from: tosca.capabilities.Endpoint

  org.ystia.kafka.pub.capabilities.KafkaTopic:
    derived_from: tosca.capabilities.Root

  org.ystia.kafka.pub.capabilities.SparkEndpoint:
    derived_from: tosca.capabilities.Root

relationship_types:
  org.ystia.kafka.pub.relationships.ConnectsToKafkaTopic:
    derived_from: org.ystia.relationships.ConnectsTo
    description: Publish or Subscribe to a Kafka topic
    valid_target_types: [ org.ystia.kafka.pub.capabilities.KafkaTopic ]

  org.ystia.kafka.pub.relationships.PublishToKafkaTopic:
    derived_from: org.ystia.relationships.ConnectsTo
    description: Publish to a Kafka topic
    valid_target_types: [ org.ystia.kafka.pub.capabilities.KafkaTopic ]
    properties:
      request_required_acks:
        description: |
          This value controls when a produce request is considered completed.
          Specifically, how many other brokers must have committed the data to their log and acknowledged this to the leader?
          Typical values are
          - no_ack, which means that the producer never waits for an acknowledgement from the broker (the same behavior as 0.7).
            This option provides the lowest latency but the weakest durability guarantees (some data will be lost when a server fails).
          - leader, which means that the producer gets an acknowledgement after the leader replica has received the data.
            This option provides better durability as the client waits until the server acknowledges the request as successful
            (only messages that were written to the now-dead leader but not yet replicated will be lost).
          - in_syncs, The producer gets an acknowledgement after all in-sync replicas have received the data.
            This option provides the greatest level of durability.
            However, it does not completely eliminate the risk of message loss because the number of in sync replicas may, in rare cases, shrink to 1.
            If you want to ensure that some minimum number of replicas (typically a majority) receive a write,
            then you must set the topic-level min.insync.replicas setting.
            Please read the Replication section of the design documentation for a more in-depth discussion.
        type: string
        required: true
        default: "no_ack"
        constraints:
          - valid_values: [ "no_ack", "leader", "in_syncs" ]
      message_send_max_retries:
        description: >
          This property will cause the producer to automatically retry a failed send request.
          This property specifies the number of retries when such failures occur.
          Note that setting a non-zero value here can lead to duplicates in the case of network errors that cause a message to be sent but the acknowledgement to be lost.
        type: integer
        required: false
        default: 3
        constraints:
          - greater_or_equal: 0
      retry_backoff_ms:
        description: >
          Before each retry, the producer refreshes the metadata of relevant topics to see if a new leader has been elected.
          Since leader election takes a bit of time, this property specifies the amount of time that the producer waits before refreshing the metadata.
        type: integer
        required: false
        default: 100
        constraints:
          - greater_or_equal: 0
      request_timeout_ms:
        description: >
          The amount of time the broker will wait trying to meet the request.required.acks requirement before sending back an error to the client.
        type: integer
        required: false
        default: 10000
        constraints:
          - greater_or_equal: 0
